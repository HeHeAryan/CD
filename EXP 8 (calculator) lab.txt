%{
#include "calculator.tab.h"  // Include the Bison-generated header for tokens
#include <stdio.h>
%}

/* Define token patterns */
DIGIT   [0-9]
%%
"("     { return '('; }
")"     { return ')'; }
"+"     { return '+'; }
"-"     { return '-'; }
"*"     { return '*'; }
"/"     { return '/'; }
{DIGIT}+ { yylval = atoi(yytext); return NUMBER; }
\n      { /* Ignore newline */ }
[ \t]   { /* Ignore whitespace */ }
.       { /* Ignore any other character */ }
%%

int yywrap() {
    return 1;
}

--------------------------------------------------

%{
#include <stdio.h>
#include <stdlib.h>

int yylex();
void yyerror(const char *s);

%}

/* Define tokens */
%token NUMBER

%%

/* Define the grammar rules */
expression:
    expression '+' term    { printf("Result = %d\n", $1 + $3); }
    | expression '-' term  { printf("Result = %d\n", $1 - $3); }
    | term
    ;

term:
    term '*' factor    { printf("Result = %d\n", $1 * $3); }
    | term '/' factor  { 
        if ($3 == 0) {
            yyerror("Division by zero");
            exit(1);
        } 
        printf("Result = %d\n", $1 / $3);
      }
    | factor
    ;

factor:
    '(' expression ')'  { $$ = $2; }
    | NUMBER            { $$ = $1; }
    ;

%%

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main() {
    printf("Enter an expression:\n");
    yyparse();
    return 0;
}
